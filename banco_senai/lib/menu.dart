// import 'dart:io';

// import 'package:banco_senai/cadastrarConta.dart';
// import 'package:banco_senai/conta.dart';
// import 'package:banco_senai/contaCorrente.dart';
// import 'package:banco_senai/contaPoupanca.dart';
// import 'package:banco_senai/filtrarConta.dart';
// import 'package:banco_senai/realizarTransferencia.dart';

// // Vari√°vel global para armazenar todas as contas
// List<Conta> contas = [];

// // Fun√ß√£o principal que inicia o programa
// void main() {
//   print("___ Bem-vindo(a) ao SenaiBank ___");

//   // Exemplo de contas iniciais para testes
//   contas.add(ContaCorrente("Ercione", 10000));
//   contas.add(ContaPoupanca("Ana", 2000));

//   while (true) {
//     _exibirMenu();
//     String opcaoEscolhida = _obterOpcao();

//     if (opcaoEscolhida == '8') {
//       print("Obrigado por usar o SenaiBank! üëã");
//       break;
//     }

//     _lidarComOpcoes(opcaoEscolhida);
//     print("\nPressione Enter para continuar...");
//     stdin.readLineSync();
//   }
// }

// // Exibe o menu de op√ß√µes
// void _exibirMenu() {
//   print("\n---------------------------");
//   print(" \n Selecione uma op√ß√£o: \n");
//   print("---------------------------");
//   print(
//     "1. Cadastrar Nova Conta\n"
//     "2. Realizar Transfer√™ncia Pix\n"
//     "3. Exibir Todas as Contas\n"
//     "4. Exibir Saldo de uma Conta\n"
//     "5. Sacar\n"
//     "6. Depositar\n"
//     "7. Simular Rendimento (Poupan√ßa)\n"
//     "8. Sair\n",
//   );
// }

// // Obt√©m e valida a op√ß√£o do usu√°rio
// String _obterOpcao() {
//   List<String> opcoesValidasMenu = ["1", "2", "3", "4", "5", "6", "7", "8"];
//   String? opcao;

//   do {
//     stdout.write("Digite uma op√ß√£o v√°lida: ");
//     opcao = stdin.readLineSync();
//     if (opcao == null || !opcoesValidasMenu.contains(opcao)) {
//       print("Op√ß√£o inv√°lida. Tente novamente!");
//     }
//   } while (opcao == null || !opcoesValidasMenu.contains(opcao));

//   return opcao;
// }

// // Lida com a op√ß√£o escolhida pelo usu√°rio
// void _lidarComOpcoes(String opcao) {
//   switch (opcao) {
//     case "1":
//       cadastrarConta(contas);
//       break;
//     case "2":
//       realizarTransferencia(contas);
//       break;
//     case "3":
//       _exibirContas();
//       break;
//     case "4":
//       _exibirSaldoConta(contas);
//       break;
//     case "5":
//       _sacarConta(contas);
//       break;
//     case "6":
//       _depositarConta(contas);
//       break;
//     case "7":
//       _simularRendimento(contas);
//       break;
//   }
// }

// // Fun√ß√£o auxiliar para exibir as contas, pode ser movida para outro arquivo se necess√°rio.
// void _exibirContas() {
//   if (contas.isEmpty) {
//     print("Nenhuma conta cadastrada.");
//     return;
//   }
//   print("\n--- Contas Cadastradas ---");
//   for (var conta in contas) {
//     print("Titular: ${conta.titular}");
//     print("Saldo: R\$${conta.saldo.toStringAsFixed(2)}");
//     print(
//       "Tipo: ${conta is ContaCorrente ? 'Conta Corrente' : 'Conta Poupan√ßa'}",
//     );
//     print("--------------------------");
//   }
// }

// // Fun√ß√£o para exibir o saldo de uma conta espec√≠fica
// void _exibirSaldoConta(List<Conta> contas) {
//   print("\n--- Exibir Saldo ---");
//   Conta? conta = filtrarConta(contas);
//   if (conta != null) {
//     print(
//       "Saldo da conta de ${conta.titular}: R\$${conta.saldo.toStringAsFixed(2)}",
//     );
//   }
// }

// // Fun√ß√£o para sacar de uma conta
// void _sacarConta(List<Conta> contas) {
//   print("\n--- Sacar ---");
//   Conta? conta = filtrarConta(contas);
//   if (conta != null) {
//     stdout.write("Digite o valor a ser sacado: ");
//     double valorSaque = double.parse(stdin.readLineSync()!);
//     if (valorSaque <= 0) {
//       print("Valor de saque inv√°lido.");
//       return;
//     }

//     if (conta is ContaCorrente) {
//       conta.sacarComChequeEspecial(valorSaque);
//     } else if (conta.saldo >= valorSaque) {
//       conta.saldo -= valorSaque;
//       print(
//         "Saque de R\$${valorSaque.toStringAsFixed(2)} realizado com sucesso!",
//       );
//       print("Novo saldo: R\$${conta.saldo.toStringAsFixed(2)}.");
//     } else {
//       print("Saldo insuficiente.");
//     }
//   }
// }

// // Fun√ß√£o para depositar em uma conta
// void _depositarConta(List<Conta> contas) {
//   print("\n--- Depositar ---");
//   Conta? conta = filtrarConta(contas);
//   if (conta != null) {
//     stdout.write("Digite o valor a ser depositado: ");
//     double valorDeposito = double.parse(stdin.readLineSync()!);
//     if (valorDeposito > 0) {
//       conta.saldo += valorDeposito;
//       print(
//         "Dep√≥sito de R\$${valorDeposito.toStringAsFixed(2)} realizado com sucesso!",
//       );
//       print("Novo saldo: R\$${conta.saldo.toStringAsFixed(2)}.");
//     } else {
//       print("Valor de dep√≥sito inv√°lido.");
//     }
//   }
// }

// // Fun√ß√£o para simular rendimento
// void _simularRendimento(List<Conta> contas) {
//   print("\n--- Simular Rendimento ---");
//   print("Selecione a conta poupan√ßa para aplicar o rendimento:");
//   Conta? conta = filtrarConta(contas);
//   if (conta != null) {
//     if (conta is ContaPoupanca) {
//       stdout.write("Digite a taxa de juros mensal (ex: 0.005 para 0.5%): ");
//       double taxa = double.parse(stdin.readLineSync()!);
//       conta.simularRendimento(taxa);
//     } else {
//       print("A conta de ${conta.titular} n√£o √© uma Conta Poupan√ßa.");
//     }
//   }
// }

// import 'dart:io';
// import 'package:banco_senai/cadastrarConta.dart';
// import 'package:banco_senai/conta.dart';
// import 'package:banco_senai/contaCorrente.dart';
// import 'package:banco_senai/contaPoupanca.dart';
// import 'package:banco_senai/filtrarConta.dart'; // Importa a nova fun√ß√£o
// import 'package:banco_senai/realizarTransferencia.dart';
// import 'package:banco_senai/usuario.dart';

// // Lista de contas de usu√°rios
// List<Usuario> usuarios = [];

// // Vari√°vel global para armazenar todas as contas
// List<Conta> contas = [];

// void main() {
//   // void main() {
//   print("___ Bem-vindo(a) ao SenaiBank ___");

//   // Adiciona um usu√°rio administrador padr√£o ao iniciar o programa
//   usuarios.add(Usuario('admin', 'admin123', 'admin'));
//   print("Usu√°rio administrador padr√£o criado.");

//   // Exemplo de contas iniciais para testes (criando os dois tipos de conta)
//   contas.add(ContaCorrente("Ercione", 10000));
//   contas.add(ContaPoupanca("Ercione", 2000));
//   contas.add(ContaCorrente("Ana", 5000));
//   contas.add(ContaPoupanca("Ana", 1500));

//   while (true) {
//     _exibirMenu();
//     String opcaoEscolhida = _obterOpcao();

//     if (opcaoEscolhida == '8') {
//       print("Obrigado por usar o SenaiBank! üëã");
//       break;
//     }

//     _lidarComOpcoes(opcaoEscolhida);
//     print("\nPressione Enter para continuar...");
//     stdin.readLineSync();
//   }
// }

// void _exibirMenu() {
//   print("\n---------------------------");
//   print(" \n Selecione uma op√ß√£o: \n");
//   print("---------------------------");
//   print(
//     "1. Cadastrar Nova Conta\n"
//     "2. Realizar Transfer√™ncia Pix\n"
//     "3. Exibir Todas as Contas\n"
//     "4. Exibir Saldo de uma Conta\n"
//     "5. Sacar\n"
//     "6. Depositar\n"
//     "7. Simular Rendimento (Poupan√ßa)\n"
//     "8. Sair\n",
//   );
// }

// String _obterOpcao() {
//   List<String> opcoesValidasMenu = ["1", "2", "3", "4", "5", "6", "7", "8"];
//   String? opcao;

//   do {
//     stdout.write("Digite uma op√ß√£o v√°lida: ");
//     opcao = stdin.readLineSync();
//     if (opcao == null || !opcoesValidasMenu.contains(opcao)) {
//       print("Op√ß√£o inv√°lida. Tente novamente!");
//     }
//   } while (opcao == null || !opcoesValidasMenu.contains(opcao));

//   return opcao;
// }

// void _lidarComOpcoes(String opcao) {
//   switch (opcao) {
//     case "1":
//       cadastrarConta(contas);
//       break;
//     case "2":
//       // A fun√ß√£o realizarTransferencia precisa ser adaptada para essa nova l√≥gica
//       realizarTransferencia(contas);
//       break;
//     case "3":
//       _exibirContas();
//       break;
//     case "4":
//       _exibirSaldoConta(contas);
//       break;
//     case "5":
//       _sacarConta(contas);
//       break;
//     case "6":
//       _depositarConta(contas);
//       break;
//     case "7":
//       _simularRendimento(contas);
//       break;
//   }
// }

// import 'dart:io';

// import 'package:banco_senai/cadastrarConta.dart';
// import 'package:banco_senai/conta.dart';
// import 'package:banco_senai/contaCorrente.dart';
// import 'package:banco_senai/contaPoupanca.dart';
// import 'package:banco_senai/filtrarConta.dart';
// import 'package:banco_senai/realizarTransferencia.dart';
// import 'package:banco_senai/usuario.dart';

// // A lista de contas de usu√°rios
// List<Conta> contas = [];

// // Nova fun√ß√£o para iniciar o menu principal
// void iniciarMenu(Usuario usuarioLogado) {
//   // Exemplo de contas iniciais para testes (criando os dois tipos de conta)
//   contas.add(ContaCorrente("Ercione", 10000));
//   contas.add(ContaPoupanca("Ercione", 2000));
//   contas.add(ContaCorrente("Ana", 5000));
//   contas.add(ContaPoupanca("Ana", 1500));

//   while (true) {
//     _exibirMenu(usuarioLogado);
//     String opcaoEscolhida = _obterOpcao();

//     if (opcaoEscolhida == '8') {
//       print("Obrigado por usar o SenaiBank! üëã");
//       break;
//     }

//     _lidarComOpcoes(opcaoEscolhida, usuarioLogado);
//     print("\nPressione Enter para continuar...");
//     stdin.readLineSync();
//   }
// }

// // Exibe o menu de op√ß√µes com base no papel do usu√°rio.
// void _exibirMenu(Usuario usuario) {
//   print("\n---------------------------");
//   print("Usu√°rio logado: ${usuario.username} (${usuario.role})");
//   print("Selecione uma op√ß√£o: \n");
//   print("---------------------------");

//   // Op√ß√µes para o administrador
//   if (usuario.role == 'admin') {
//     print("1. Cadastrar Nova Conta\n"
//       "2. Realizar Transfer√™ncia Pix\n"
//       "3. Exibir Todas as Contas\n"
//       "4. Exibir Saldo de uma Conta\n"
//       "5. Sacar\n"
//       "6. Depositar\n"
//       "7. Simular Rendimento (Poupan√ßa)\n"
//       "8. Sair\n");
//   } else {
//     // Op√ß√µes para um cliente padr√£o
//     print("2. Realizar Transfer√™ncia Pix\n"
//       "4. Exibir Saldo de uma Conta\n"
//       "5. Sacar\n"
//       "6. Depositar\n"
//       "7. Simular Rendimento (Poupan√ßa)\n"
//       "8. Sair\n");
//   }
// }

// String _obterOpcao() {
//   List<String> opcoesValidasMenu = ["1", "2", "3", "4", "5", "6", "7", "8"];
//   String? opcao;

//   do {
//     stdout.write("Digite uma op√ß√£o v√°lida: ");
//     opcao = stdin.readLineSync();
//     if (opcao == null || !opcoesValidasMenu.contains(opcao)) {
//       print("Op√ß√£o inv√°lida. Tente novamente!");
//     }
//   } while (opcao == null || !opcoesValidasMenu.contains(opcao));

//   return opcao;
// }

// void _lidarComOpcoes(String opcao, Usuario usuario) {
//   switch (opcao) {
//     case "1":
//       if (usuario.role == 'admin') {
//         cadastrarConta(contas);
//       } else {
//         print("Acesso negado. Esta op√ß√£o √© apenas para administradores.");
//       }
//       break;
//     case "2":
//       realizarTransferencia(contas);
//       break;
//     case "3":
//       if (usuario.role == 'admin') {
//         _exibirContas();
//       } else {
//         print("Acesso negado. Esta op√ß√£o √© apenas para administradores.");
//       }
//       break;
//     case "4":
//       _exibirSaldoConta(contas);
//       break;
//     case "5":
//       _sacarConta(contas);
//       break;
//     case "6":
//       _depositarConta(contas);
//       break;
//     case "7":
//       _simularRendimento(contas);
//       break;
//   }
// }

// import 'dart:io';

// import 'package:banco_senai/cadastrarConta.dart';
// import 'package:banco_senai/conta.dart';
// import 'package:banco_senai/contaCorrente.dart';
// import 'package:banco_senai/contaPoupanca.dart';
// import 'package:banco_senai/filtrarConta.dart';
// import 'package:banco_senai/realizarTransferencia.dart';
// import 'package:banco_senai/usuario.dart';

// // Vari√°vel global para armazenar todas as contas
// List<Conta> contas = [];

// // Lista de usu√°rios
// List<Usuario> usuarios = [];

// // Nova fun√ß√£o para iniciar o menu principal
// void iniciarMenu(Usuario usuarioLogado) {
//   contas.add(ContaCorrente("Ercione", 10000));
//   contas.add(ContaPoupanca("Ercione", 2000));
//   contas.add(ContaCorrente("Ana", 5000));
//   contas.add(ContaPoupanca("Ana", 1500));

//   while (true) {
//     _exibirMenu(usuarioLogado);
//     String opcaoEscolhida = _obterOpcao();

//     if (opcaoEscolhida == '8') {
//       print("Obrigado por usar o SenaiBank! üëã");
//       break;
//     }

//     _lidarComOpcoes(opcaoEscolhida, usuarioLogado);
//     print("\nPressione Enter para continuar...");
//     stdin.readLineSync();
//   }
// }

// // Restante do c√≥digo do menu...

// void _lidarComOpcoes(String opcao, Usuario usuario) {
//   switch (opcao) {
//     case "1":
//       if (usuario.role == 'admin') {
//         // Aqui o erro √© corrigido: passa a lista de usu√°rios como argumento
//         cadastrarConta(contas, usuarios);
//       } else {
//         print("Acesso negado. Esta op√ß√£o √© apenas para administradores.");
//       }
//       break;
//     case "2":
//       realizarTransferencia(contas);
//       break;
//     case "3":
//       if (usuario.role == 'admin') {
//         _exibirContas();
//       } else {
//         print("Acesso negado. Esta op√ß√£o √© apenas para administradores.");
//       }
//       break;
//     case "4":
//       _exibirSaldoConta(contas);
//       break;
//     case "5":
//       _sacarConta(contas);
//       break;
//     case "6":
//       _depositarConta(contas);
//       break;
//     case "7":
//       _simularRendimento(contas);
//       break;
//   }
// }
// // Resto das fun√ß√µes...

// // Fun√ß√£o auxiliar para exibir as contas, sem altera√ß√µes.
// void _exibirContas() {
//   if (contas.isEmpty) {
//     print("Nenhuma conta cadastrada.");
//     return;
//   }
//   print("\n--- Contas Cadastradas ---");
//   for (var conta in contas) {
//     print("Titular: ${conta.titular}");
//     print("Saldo: R\$${conta.saldo.toStringAsFixed(2)}");
//     print("Tipo: ${conta.tipo}");
//     print("--------------------------");
//   }
// }

// // Novo auxiliar para obter e selecionar uma conta
// Conta? _selecionarConta(List<Conta> contasEncontradas) {
//   if (contasEncontradas.length == 1) {
//     return contasEncontradas.first;
//   }

//   print("Contas encontradas:");
//   for (int i = 0; i < contasEncontradas.length; i++) {
//     print(
//       "${i + 1}. Titular: ${contasEncontradas[i].titular} (${contasEncontradas[i].tipo})",
//     );
//   }

//   stdout.write("Selecione a conta (1 ou 2): ");
//   String? escolha = stdin.readLineSync();
//   int? index = int.tryParse(escolha!) ?? -1;

//   if (index! > 0 && index <= contasEncontradas.length) {
//     return contasEncontradas[index - 1];
//   } else {
//     print("Sele√ß√£o inv√°lida.");
//     return null;
//   }
// }

// // Fun√ß√£o para exibir o saldo de uma conta espec√≠fica
// void _exibirSaldoConta(List<Conta> contas) {
//   print("\n--- Exibir Saldo ---");
//   List<Conta> contasEncontradas = filtrarContasPorTitular(contas);

//   if (contasEncontradas.isNotEmpty) {
//     Conta? contaSelecionada = _selecionarConta(contasEncontradas);
//     if (contaSelecionada != null) {
//       print(
//         "Saldo da conta de ${contaSelecionada.titular} (${contaSelecionada.tipo}): R\$${contaSelecionada.saldo.toStringAsFixed(2)}",
//       );
//     }
//   }
// }

// // Fun√ß√£o para sacar de uma conta
// void _sacarConta(List<Conta> contas) {
//   print("\n--- Sacar ---");
//   List<Conta> contasEncontradas = filtrarContasPorTitular(contas);

//   if (contasEncontradas.isNotEmpty) {
//     Conta? conta = _selecionarConta(contasEncontradas);
//     if (conta != null) {
//       stdout.write("Digite o valor a ser sacado: ");
//       double valorSaque = double.parse(stdin.readLineSync()!);
//       if (valorSaque <= 0) {
//         print("Valor de saque inv√°lido.");
//         return;
//       }

//       if (conta is ContaCorrente) {
//         conta.sacarComChequeEspecial(valorSaque);
//       } else if (conta.saldo >= valorSaque) {
//         conta.saldo -= valorSaque;
//         print(
//           "Saque de R\$${valorSaque.toStringAsFixed(2)} realizado com sucesso!",
//         );
//         print("Novo saldo: R\$${conta.saldo.toStringAsFixed(2)}.");
//       } else {
//         print("Saldo insuficiente.");
//       }
//     }
//   }
// }

// // Fun√ß√£o para depositar em uma conta
// void _depositarConta(List<Conta> contas) {
//   print("\n--- Depositar ---");
//   List<Conta> contasEncontradas = filtrarContasPorTitular(contas);

//   if (contasEncontradas.isNotEmpty) {
//     Conta? conta = _selecionarConta(contasEncontradas);
//     if (conta != null) {
//       stdout.write("Digite o valor a ser depositado: ");
//       double valorDeposito = double.parse(stdin.readLineSync()!);
//       if (valorDeposito > 0) {
//         conta.saldo += valorDeposito;
//         print(
//           "Dep√≥sito de R\$${valorDeposito.toStringAsFixed(2)} realizado com sucesso!",
//         );
//         print("Novo saldo: R\$${conta.saldo.toStringAsFixed(2)}.");
//       } else {
//         print("Valor de dep√≥sito inv√°lido.");
//       }
//     }
//   }
// }

// // Fun√ß√£o para simular rendimento
// void _simularRendimento(List<Conta> contas) {
//   print("\n--- Simular Rendimento ---");
//   List<Conta> contasEncontradas = filtrarContasPorTitular(contas);

//   if (contasEncontradas.isNotEmpty) {
//     Conta? conta = _selecionarConta(contasEncontradas);
//     if (conta != null) {
//       if (conta is ContaPoupanca) {
//         stdout.write("Digite a taxa de juros mensal (ex: 0.005 para 0.5%): ");
//         double taxa = double.parse(stdin.readLineSync()!);
//         conta.simularRendimento(taxa);
//       } else {
//         print("A conta de ${conta.titular} n√£o √© uma Conta Poupan√ßa.");
//       }
//     }
//   }
// }

//***
//*

// import 'dart:io';

// import 'package:banco_senai/cadastrarConta.dart';
// import 'package:banco_senai/conta.dart';
// import 'package:banco_senai/contaCorrente.dart';
// import 'package:banco_senai/contaPoupanca.dart';
// import 'package:banco_senai/filtrarConta.dart';
// import 'package:banco_senai/realizarTransferencia.dart';
// import 'package:banco_senai/usuario.dart';

// // Vari√°vel global para armazenar todas as contas
// List<Conta> contas = [];
// // Lista de usu√°rios
// List<Usuario> usuarios = [];

// void iniciarMenu(Usuario usuarioLogado) {
//   // Exemplo de contas iniciais para testes (criando os dois tipos de conta)
//   contas.add(ContaCorrente("Ercione", 10000));
//   contas.add(ContaPoupanca("Ercione", 2000));
//   contas.add(ContaCorrente("Ana", 5000));
//   contas.add(ContaPoupanca("Ana", 1500));

//   while (true) {
//     _exibirMenu(usuarioLogado);
//     String opcaoEscolhida = _obterOpcao();

//     if (opcaoEscolhida == '8') {
//       print("Obrigado por usar o SenaiBank! üëã");
//       break;
//     }

//     _lidarComOpcoes(opcaoEscolhida, usuarioLogado);
//     print("\nPressione Enter para continuar...");
//     stdin.readLineSync();
//   }
// }

// // Exibe o menu de op√ß√µes com base no papel do usu√°rio.
// void _exibirMenu(Usuario usuario) {
//   print("\n---------------------------");
//   print("Usu√°rio logado: ${usuario.username} (${usuario.role})");
//   print("Selecione uma op√ß√£o: \n");
//   print("---------------------------");

//   // Op√ß√µes para o administrador
//   if (usuario.role == 'admin') {
//     print(
//       "1. Cadastrar Nova Conta\n"
//       "2. Realizar Transfer√™ncia Pix\n"
//       "3. Exibir Todas as Contas\n"
//       "4. Exibir Saldo de uma Conta\n"
//       "5. Sacar\n"
//       "6. Depositar\n"
//       "7. Simular Rendimento (Poupan√ßa)\n"
//       "8. Sair\n",
//     );
//   } else {
//     // Op√ß√µes para um cliente padr√£o
//     print(
//       "2. Realizar Transfer√™ncia Pix\n"
//       "4. Exibir Saldo de uma Conta\n"
//       "5. Sacar\n"
//       "6. Depositar\n"
//       "7. Simular Rendimento (Poupan√ßa)\n"
//       "8. Sair\n",
//     );
//   }
// }

// String _obterOpcao() {
//   List<String> opcoesValidasMenu = ["1", "2", "3", "4", "5", "6", "7", "8"];
//   String? opcao;

//   do {
//     stdout.write("Digite uma op√ß√£o v√°lida: ");
//     opcao = stdin.readLineSync();
//     if (opcao == null || !opcoesValidasMenu.contains(opcao)) {
//       print("Op√ß√£o inv√°lida. Tente novamente!");
//     }
//   } while (opcao == null || !opcoesValidasMenu.contains(opcao));

//   return opcao;
// }

// void _lidarComOpcoes(String opcao, Usuario usuario) {
//   switch (opcao) {
//     case "1":
//       if (usuario.role == 'admin') {
//         cadastrarConta(contas, usuarios);
//       } else {
//         print("Acesso negado. Esta op√ß√£o √© apenas para administradores.");
//       }
//       break;
//     case "2":
//       realizarTransferencia(contas);
//       break;
//     case "3":
//       if (usuario.role == 'admin') {
//         _exibirContas();
//       } else {
//         print("Acesso negado. Esta op√ß√£o √© apenas para administradores.");
//       }
//       break;
//     case "4":
//       _exibirSaldoConta(contas);
//       break;
//     case "5":
//       _sacarConta(contas);
//       break;
//     case "6":
//       _depositarConta(contas);
//       break;
//     case "7":
//       _simularRendimento(contas);
//       break;
//   }
// }

// // Fun√ß√µes auxiliares (elas precisam estar definidas antes de serem chamadas no menu)
// // A ordem n√£o importa tanto aqui, desde que estejam antes da fun√ß√£o principal.
//**Funcional */

// lib/menu.dart

import 'dart:io';

import 'package:banco_senai/cadastrarConta.dart';
import 'package:banco_senai/conta.dart';
import 'package:banco_senai/contaCorrente.dart';
import 'package:banco_senai/contaPoupanca.dart';
import 'package:banco_senai/filtrarConta.dart';
import 'package:banco_senai/realizarTransferencia.dart';
import 'package:banco_senai/usuario.dart';

List<Conta> contas = [];
List<Usuario> usuarios = [];

// A fun√ß√£o iniciarMenu agora recebe as contas
void iniciarMenu(Usuario usuarioLogado, List<Conta> contas) {
  while (true) {
    _exibirMenu(usuarioLogado);
    String opcaoEscolhida = _obterOpcao();

    if (opcaoEscolhida == '8') {
      print("Deslogando usu√°rio ${usuarioLogado.username}.");
      break; // Sai do menu, mas o programa continua.
    }

    // Adicione um case para a nova op√ß√£o de sair do sistema
    if (opcaoEscolhida == '9') {
      print("Saindo do sistema. At√© mais!");
      exit(0); // Encerra o programa completamente
    }

    _lidarComOpcoes(opcaoEscolhida, usuarioLogado);
    print("\nPressione Enter para continuar...");
    stdin.readLineSync();
  }
}

void _exibirMenu(Usuario usuario) {
  print("\n---------------------------");
  print("Usu√°rio logado: ${usuario.username} (${usuario.role})");
  print("Selecione uma op√ß√£o: \n");
  print("---------------------------");

  if (usuario.role == 'admin') {
    print(
      "1. Cadastrar Nova Conta\n"
      "2. Realizar Transfer√™ncia Pix\n"
      "3. Exibir Todas as Contas\n"
      "4. Exibir Saldo de uma Conta\n"
      "5. Sacar\n"
      "6. Depositar\n"
      "7. Simular Rendimento (Poupan√ßa)\n"
      "8. Deslogar\n"
      "9. Sair do Sistema\n",
    );
  } else {
    print(
      "2. Realizar Transfer√™ncia Pix\n"
      "4. Exibir Saldo de uma Conta\n"
      "5. Sacar\n"
      "6. Depositar\n"
      "7. Simular Rendimento (Poupan√ßa)\n"
      "8. Deslogar\n"
      "9. Sair do Sistema\n",
    );
  }
}

String _obterOpcao() {
  List<String> opcoesValidasMenu = [
    "1",
    "2",
    "3",
    "4",
    "5",
    "6",
    "7",
    "8",
    "9",
  ];
  String? opcao;

  do {
    stdout.write("Digite uma op√ß√£o v√°lida: ");
    opcao = stdin.readLineSync();
    if (opcao == null || !opcoesValidasMenu.contains(opcao)) {
      print("Op√ß√£o inv√°lida. Tente novamente!");
    }
  } while (opcao == null || !opcoesValidasMenu.contains(opcao));

  return opcao;
}

// O restante das fun√ß√µes do menu (lidarComOpcoes, exibirContas, etc.)
// precisa ser atualizado para usar a lista de contas que agora √© um par√¢metro
// da fun√ß√£o iniciarMenu.
void _lidarComOpcoes(String opcao, Usuario usuario) {
  switch (opcao) {
    case "1":
      if (usuario.role == 'admin') {
        // A fun√ß√£o cadastrarConta tamb√©m precisa da lista de contas e usu√°rios
        cadastrarConta(contas, usuarios);
      } else {
        print("Acesso negado. Esta op√ß√£o √© apenas para administradores.");
      }
      break;
    case "2":
      realizarTransferencia(contas);
      break;
    case "3":
      if (usuario.role == 'admin') {
        _exibirContas();
      } else {
        print("Acesso negado. Esta op√ß√£o √© apenas para administradores.");
      }
      break;
    case "4":
      _exibirSaldoConta(contas);
      break;
    case "5":
      _sacarConta(contas);
      break;
    case "6":
      _depositarConta(contas);
      break;
    case "7":
      _simularRendimento(contas);
      break;
  }
}

// Fun√ß√£o auxiliar para exibir as contas
void _exibirContas() {
  if (contas.isEmpty) {
    print("Nenhuma conta cadastrada.");
    return;
  }
  print("\n--- Contas Cadastradas ---");
  for (var conta in contas) {
    print("Titular: ${conta.titular}");
    print("Saldo: R\$${conta.saldo.toStringAsFixed(2)}");
    print("Tipo: ${conta.tipo}");
    print("--------------------------");
  }
}

Conta? _selecionarConta(List<Conta> contasEncontradas) {
  if (contasEncontradas.length == 1) {
    return contasEncontradas.first;
  }

  print("Contas encontradas:");
  for (int i = 0; i < contasEncontradas.length; i++) {
    print(
      "${i + 1}. Titular: ${contasEncontradas[i].titular} (${contasEncontradas[i].tipo})",
    );
  }

  stdout.write("Selecione a conta (1 ou 2): ");
  String? escolha = stdin.readLineSync();
  int? index = int.tryParse(escolha!) ?? -1;

  if (index! > 0 && index <= contasEncontradas.length) {
    return contasEncontradas[index - 1];
  } else {
    print("Sele√ß√£o inv√°lida.");
    return null;
  }
}

void _exibirSaldoConta(List<Conta> contas) {
  print("\n--- Exibir Saldo ---");
  List<Conta> contasEncontradas = filtrarContasPorTitular(contas);

  if (contasEncontradas.isNotEmpty) {
    Conta? contaSelecionada = _selecionarConta(contasEncontradas);
    if (contaSelecionada != null) {
      print(
        "Saldo da conta de ${contaSelecionada.titular} (${contaSelecionada.tipo}): R\$${contaSelecionada.saldo.toStringAsFixed(2)}",
      );
    }
  }
}

void _sacarConta(List<Conta> contas) {
  print("\n--- Sacar ---");
  List<Conta> contasEncontradas = filtrarContasPorTitular(contas);

  if (contasEncontradas.isNotEmpty) {
    Conta? conta = _selecionarConta(contasEncontradas);
    if (conta != null) {
      stdout.write("Digite o valor a ser sacado: ");
      double valorSaque = double.parse(stdin.readLineSync()!);
      if (valorSaque <= 0) {
        print("Valor de saque inv√°lido.");
        return;
      }

      if (conta is ContaCorrente) {
        conta.sacarComChequeEspecial(valorSaque);
      } else if (conta.saldo >= valorSaque) {
        conta.saldo -= valorSaque;
        print(
          "Saque de R\$${valorSaque.toStringAsFixed(2)} realizado com sucesso!",
        );
        print("Novo saldo: R\$${conta.saldo.toStringAsFixed(2)}.");
      } else {
        print("Saldo insuficiente.");
      }
    }
  }
}

void _depositarConta(List<Conta> contas) {
  print("\n--- Depositar ---");
  List<Conta> contasEncontradas = filtrarContasPorTitular(contas);

  if (contasEncontradas.isNotEmpty) {
    Conta? conta = _selecionarConta(contasEncontradas);
    if (conta != null) {
      stdout.write("Digite o valor a ser depositado: ");
      double valorDeposito = double.parse(stdin.readLineSync()!);
      if (valorDeposito > 0) {
        conta.saldo += valorDeposito;
        print(
          "Dep√≥sito de R\$${valorDeposito.toStringAsFixed(2)} realizado com sucesso!",
        );
        print("Novo saldo: R\$${conta.saldo.toStringAsFixed(2)}.");
      } else {
        print("Valor de dep√≥sito inv√°lido.");
      }
    }
  }
}

void _simularRendimento(List<Conta> contas) {
  print("\n--- Simular Rendimento ---");
  List<Conta> contasEncontradas = filtrarContasPorTitular(contas);

  if (contasEncontradas.isNotEmpty) {
    Conta? conta = _selecionarConta(contasEncontradas);
    if (conta != null) {
      if (conta is ContaPoupanca) {
        stdout.write("Digite a taxa de juros mensal (ex: 0.005 para 0.5%): ");
        double taxa = double.parse(stdin.readLineSync()!);
        conta.simularRendimento(taxa);
      } else {
        print("A conta de ${conta.titular} n√£o √© uma Conta Poupan√ßa.");
      }
    }
  }
}
